// Generated by CoffeeScript 1.6.3
var Browser, ExpressHtmlSnapshots, MemoryStore, async,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

async = require('async');

Browser = require('zombie');

MemoryStore = (function() {
  function MemoryStore() {
    this.set = __bind(this.set, this);
    this.get = __bind(this.get, this);
    this.data = {};
  }

  MemoryStore.prototype.get = function(key, callback) {
    return callback(null, this.data[key]);
  };

  MemoryStore.prototype.set = function(key, value, callback) {
    this.data[key] = value;
    return callback(null, value);
  };

  return MemoryStore;

})();

ExpressHtmlSnapshots = (function() {
  function ExpressHtmlSnapshots(options) {
    var _this = this;
    this.options = options != null ? options : {};
    this._generateUrlFromRequest = __bind(this._generateUrlFromRequest, this);
    this._shouldServeSnapshot = __bind(this._shouldServeSnapshot, this);
    this._onSnapshotTaken = __bind(this._onSnapshotTaken, this);
    this._serveSnapshot = __bind(this._serveSnapshot, this);
    this._preloadSnapshot = __bind(this._preloadSnapshot, this);
    this.snapshot = __bind(this.snapshot, this);
    this.middleware = __bind(this.middleware, this);
    this.googlebotMiddleware = __bind(this.googlebotMiddleware, this);
    this.store = null;
    if (this.options.store == null) {
      this.store = new MemoryStore();
    } else if (this.options.store) {
      this.store = this.options.store;
    }
    if (this.options.prefetchUrls instanceof Array) {
      async.mapLimit(this.options.prefetchUrls, 10, this._preloadSnapshot, function() {});
    }
  }

  ExpressHtmlSnapshots.prototype.googlebotMiddleware = function() {
    return this.middleware.apply(this, arguments);
  };

  ExpressHtmlSnapshots.prototype.middleware = function(req, res, next) {
    if (this._shouldServeSnapshot(req)) {
      return this._serveSnapshot(req, res, next);
    } else {
      return next();
    }
  };

  ExpressHtmlSnapshots.prototype.snapshot = function(url, callback) {
    var browser,
      _this = this;
    browser = new Browser();
    browser.runScripts = true;
    return browser.visit(url, function(err, browser) {
      return callback(err, browser.html());
    });
  };

  ExpressHtmlSnapshots.prototype._preloadSnapshot = function(url, callback) {
    var _this = this;
    return this.snapshot(url, function(err, html) {
      if (err) {
        return callback(err);
      }
      return _this.store.set(url, html, callback);
    });
  };

  ExpressHtmlSnapshots.prototype._serveSnapshot = function(req, res, next) {
    var url,
      _this = this;
    url = this._generateUrlFromRequest(req);
    if (this.store) {
      return this.store.get(url, function(err, html) {
        if (html) {
          return res.send(html);
        } else {
          return _this.snapshot(url, _this._onSnapshotTaken.bind(_this, url, res, next));
        }
      });
    } else {
      return this.snapshot(url, this._onSnapshotTaken.bind(this, url, res, next));
    }
  };

  ExpressHtmlSnapshots.prototype._onSnapshotTaken = function(url, res, next, err, html) {
    var _ref;
    if (err) {
      return next();
    }
    res.send(html);
    return (_ref = this.store) != null ? _ref.set(url, html, function() {}) : void 0;
  };

  ExpressHtmlSnapshots.prototype._shouldServeSnapshot = function(req) {
    return (req.query['_escaped_fragment_'] != null) || ((req.headers['user-agent'] != null) && /googlebot|bingbot|yahoo/i.test(req.headers['user-agent']));
  };

  ExpressHtmlSnapshots.prototype._generateUrlFromRequest = function(req) {
    var key, url;
    url = "";
    if (req.query['_escaped_fragment_'] != null) {
      url = "" + req.protocol + "://" + req.headers.host + req.path + "#!" + req.query['_escaped_fragment_'] + "?";
      delete req.query['_escaped_fragment_'];
      for (key in req.query) {
        url += "" + key + "=" + req.query[key] + "&";
      }
      url = url.replace(/&$/g, '');
    } else {
      url = "" + req.protocol + "://" + req.headers.host + req.originalUrl;
    }
    return url;
  };

  return ExpressHtmlSnapshots;

})();

module.exports = ExpressHtmlSnapshots;
